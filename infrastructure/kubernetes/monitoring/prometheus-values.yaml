# Prometheus Helm Values Configuration
# Version: 2.45.0
# Platform: Kubernetes 1.24.x

# Global configuration
global:
  evaluation_interval: 1m
  scrape_interval: 15s
  external_labels:
    cluster: habit-tracker-prod
    environment: production

# Main Prometheus server configuration
prometheus:
  replicas: 2
  image:
    repository: prom/prometheus
    tag: v2.45.0
    pullPolicy: IfNotPresent
  
  resources:
    requests:
      cpu: 500m
      memory: 2Gi
    limits:
      cpu: 2000m
      memory: 4Gi
  
  persistence:
    enabled: true
    size: 100Gi
    storageClass: gp3
    annotations:
      backup.velero.io/backup-volumes: prometheus-data
  
  retention:
    time: 15d
    size: 50GB
  
  podDisruptionBudget:
    enabled: true
    minAvailable: 1

# Service discovery and monitoring configurations
serviceMonitors:
  - name: api-gateway
    selector:
      matchLabels:
        app: api-gateway
    endpoints:
      - port: http
        path: /metrics
        interval: 15s
        scrapeTimeout: 10s
        metricRelabelings:
          - sourceLabels: [__name__]
            regex: 'http_request_duration_.*'
            action: keep
  
  - name: habit-service
    selector:
      matchLabels:
        app: habit-service
    endpoints:
      - port: http
        path: /metrics
        interval: 15s
        scrapeTimeout: 10s
  
  - name: analytics-service
    selector:
      matchLabels:
        app: analytics-service
    endpoints:
      - port: http
        path: /metrics
        interval: 30s
        scrapeTimeout: 25s

# Alert manager configuration
alertmanager:
  enabled: true
  replicaCount: 2
  
  persistence:
    enabled: true
    size: 20Gi
    storageClass: gp3
  
  config:
    global:
      resolve_timeout: 5m
      smtp_smarthost: smtp.habit-tracker.com:587
      smtp_from: alerts@habit-tracker.com
      smtp_auth_username: "${SMTP_USERNAME}"
      smtp_auth_password: "${SMTP_PASSWORD}"
    
    route:
      group_by: ['job', 'severity']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 4h
      receiver: ops-team
      routes:
        - match:
            severity: critical
          receiver: ops-team
          group_wait: 0s
    
    receivers:
      - name: ops-team
        email_configs:
          - to: ops@habit-tracker.com
            send_resolved: true
        slack_configs:
          - channel: '#alerts'
            api_url: "${SLACK_WEBHOOK_URL}"
            send_resolved: true
            title: '{{ template "slack.default.title" . }}'
            text: '{{ template "slack.default.text" . }}'

# Alerting rules configuration
rules:
  groups:
    - name: api.rules
      rules:
        - alert: HighResponseTime
          expr: http_request_duration_seconds > 0.1
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: High response time detected
            description: API endpoint response time is above 100ms threshold
        
        - alert: HighErrorRate
          expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: High error rate detected
            description: Error rate is above 10% in the last 5 minutes
        
        - alert: HighMemoryUsage
          expr: container_memory_usage_bytes{container!=""} > 3.8e9
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: High memory usage detected
            description: Container memory usage is above 3.8GB

# Security configuration
security:
  rbac:
    create: true
    pspEnabled: false
  
  networkPolicy:
    enabled: true
    ingress:
      from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
        - podSelector:
            matchLabels:
              app: grafana

# Storage and retention configuration
storage:
  tsdb:
    retention:
      time: 15d
      size: 50GB
    compaction:
      enabled: true
      maxBlockDuration: 24h

# Additional configurations
additionalScrapeConfigs:
  - job_name: 'kubernetes-nodes'
    kubernetes_sd_configs:
      - role: node
    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
  
  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true

# Resource quotas for monitoring namespace
resourceQuota:
  enabled: true
  spec:
    hard:
      requests.cpu: "4"
      requests.memory: 8Gi
      limits.cpu: "8"
      limits.memory: 16Gi

# Grafana integration
grafana:
  enabled: true
  adminPassword: "${GRAFANA_ADMIN_PASSWORD}"
  persistence:
    enabled: true
    size: 10Gi
    storageClass: gp3
  
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-server
          access: proxy
          isDefault: true
apiVersion: apps/v1
kind: Deployment
metadata:
  name: habit-service
  namespace: default
  labels:
    app: habit-tracker
    service: habit-service
    environment: production
    version: latest
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "metrics"
    kubernetes.io/description: "Habit Service microservice for core habit tracking functionality"
    deployment.kubernetes.io/revision: "1"

spec:
  # High availability with minimum 3 replicas
  replicas: 3

  # Zero-downtime rolling updates
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0

  # Pod selector matching
  selector:
    matchLabels:
      app: habit-tracker
      service: habit-service

  template:
    metadata:
      labels:
        app: habit-tracker
        service: habit-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "metrics"

    spec:
      # Security context for the pod
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault

      # Container specifications
      containers:
        - name: habit-service
          image: habit-tracker/habit-service:latest
          imagePullPolicy: Always

          # Container ports
          ports:
            - name: http
              containerPort: 3002
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP

          # Resource requests and limits
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 1Gi

          # Security context for the container
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 1000
            runAsGroup: 1000
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL

          # Liveness probe
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3

          # Readiness probe
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3

          # Environment variables from ConfigMap
          envFrom:
            - configMapRef:
                name: habit-tracker-config

          # Sensitive environment variables from Secrets
          env:
            - name: DB_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: habit-tracker-secrets
                  key: DB_CONNECTION_STRING
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: habit-tracker-secrets
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: habit-tracker-secrets
                  key: DB_PASSWORD
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: habit-tracker-secrets
                  key: JWT_SECRET

          # Volume mounts for temporary storage
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /cache

      # Volumes definition
      volumes:
        - name: tmp
          emptyDir: {}
        - name: cache
          emptyDir: {}

      # Pod termination grace period
      terminationGracePeriodSeconds: 60

      # Affinity rules for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: service
                      operator: In
                      values:
                        - habit-service
                topologyKey: kubernetes.io/hostname

      # Node selection
      nodeSelector:
        kubernetes.io/role: worker

      # Tolerations for node conditions
      tolerations:
        - key: node.kubernetes.io/not-ready
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 300
        - key: node.kubernetes.io/unreachable
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 300
name: Notification Service CI/CD

# Trigger workflow on push/PR to main branch for notification service changes
on:
  push:
    branches: [ main ]
    paths:
      - 'src/backend/src/notification-service/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/backend/src/notification-service/**'

# Environment variables
env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: habit-tracker/notification-service
  NODE_ENV: production
  PORT: 3003

# Concurrency control to prevent parallel deployments
concurrency:
  group: notification-service-${{ github.ref }}
  cancel-in-progress: true

# Define required permissions
permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: src/backend/src/notification-service/package-lock.json
      
      - name: Install dependencies
        working-directory: src/backend/src/notification-service
        run: |
          npm ci
          npm audit
      
      - name: Run linting
        working-directory: src/backend/src/notification-service
        run: npm run lint
      
      - name: Run tests with coverage
        working-directory: src/backend/src/notification-service
        run: |
          npm run test:cov
          if [ $(jq '.total.lines.pct' coverage/coverage-summary.json) -lt 80 ]; then
            echo "Test coverage below 80%"
            exit 1
          fi
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: src/backend/src/notification-service/coverage
          retention-days: 14

  build-and-push:
    name: Build and Push Image
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug
      
      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: src/backend/src/notification-service
          file: src/backend/src/notification-service/Dockerfile
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=${{ env.NODE_ENV }}
            BUILD_VERSION=${{ github.sha }}
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.8.0
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://api.habit-tracker.com/notifications
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.24.0'
      
      - name: Update kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig
          chmod 600 kubeconfig
          export KUBECONFIG=kubeconfig
      
      - name: Update deployment image
        run: |
          kubectl set image deployment/notification-service \
            notification-service=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
            --record
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/notification-service --timeout=300s
      
      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
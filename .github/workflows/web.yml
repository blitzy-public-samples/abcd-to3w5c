name: Web CI/CD

# Trigger workflow on push and pull requests to main branch
on:
  push:
    branches: [main]
    paths:
      - 'src/web/**'
      - '.github/workflows/web.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/web/**'
      - '.github/workflows/web.yml'

# Environment variables for container registry
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/web
  NODE_VERSION: '18'

jobs:
  # Job for running tests, type checking, and linting
  test:
    name: Test and Validate
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/web/package-lock.json

      - name: Install dependencies
        working-directory: src/web
        run: |
          npm ci
          npm audit

      - name: Run ESLint
        working-directory: src/web
        run: npm run lint
        
      - name: Run TypeScript type checking
        working-directory: src/web
        run: npm run typecheck

      - name: Run unit tests with coverage
        working-directory: src/web
        run: npm run test:coverage

      - name: Run accessibility tests
        working-directory: src/web
        run: npm run test:a11y

  # Job for building and pushing Docker image
  build-and-push:
    name: Build and Push Image
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          buildkitd-flags: --debug

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=sha,format=long
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: src/web
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
            VITE_AUTH0_DOMAIN=${{ secrets.VITE_AUTH0_DOMAIN }}
            VITE_AUTH0_CLIENT_ID=${{ secrets.VITE_AUTH0_CLIENT_ID }}
            VITE_SENTRY_DSN=${{ secrets.VITE_SENTRY_DSN }}
          platforms: linux/amd64,linux/arm64

  # Job for deployment to production
  deploy:
    name: Deploy to Production
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://app.habittracker.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster habit-tracker-cluster \
            --service habit-tracker-web \
            --force-new-deployment \
            --region us-west-2

      - name: Wait for ECS deployment
        run: |
          aws ecs wait services-stable \
            --cluster habit-tracker-cluster \
            --services habit-tracker-web \
            --region us-west-2

      - name: Notify deployment status
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'deployments'
          slack-message: |
            *Deployment Status*: ${{ job.status }}
            *Environment*: Production
            *Service*: Web Application
            *Commit*: ${{ github.sha }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  # Job for security scanning
  security:
    name: Security Scan
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif